package com.comvee.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.comvee.hospitalabbott.bean.NewBloodItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_BLOOD_ITEM".
*/
public class NewBloodItemDao extends AbstractDao<NewBloodItem, Long> {

    public static final String TABLENAME = "NEW_BLOOD_ITEM";

    /**
     * Properties of entity NewBloodItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property History_id = new Property(1, int.class, "history_id", false, "HISTORY_ID");
        public final static Property MemberId = new Property(2, int.class, "memberId", false, "MEMBER_ID");
        public final static Property Year = new Property(3, int.class, "year", false, "YEAR");
        public final static Property Mouth = new Property(4, int.class, "mouth", false, "MOUTH");
        public final static Property Day = new Property(5, int.class, "day", false, "DAY");
        public final static Property Hour = new Property(6, int.class, "hour", false, "HOUR");
        public final static Property Minus = new Property(7, int.class, "minus", false, "MINUS");
        public final static Property Sugar = new Property(8, String.class, "sugar", false, "SUGAR");
    }


    public NewBloodItemDao(DaoConfig config) {
        super(config);
    }
    
    public NewBloodItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_BLOOD_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HISTORY_ID\" INTEGER NOT NULL ," + // 1: history_id
                "\"MEMBER_ID\" INTEGER NOT NULL ," + // 2: memberId
                "\"YEAR\" INTEGER NOT NULL ," + // 3: year
                "\"MOUTH\" INTEGER NOT NULL ," + // 4: mouth
                "\"DAY\" INTEGER NOT NULL ," + // 5: day
                "\"HOUR\" INTEGER NOT NULL ," + // 6: hour
                "\"MINUS\" INTEGER NOT NULL ," + // 7: minus
                "\"SUGAR\" TEXT);"); // 8: sugar
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_BLOOD_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewBloodItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getHistory_id());
        stmt.bindLong(3, entity.getMemberId());
        stmt.bindLong(4, entity.getYear());
        stmt.bindLong(5, entity.getMouth());
        stmt.bindLong(6, entity.getDay());
        stmt.bindLong(7, entity.getHour());
        stmt.bindLong(8, entity.getMinus());
 
        String sugar = entity.getSugar();
        if (sugar != null) {
            stmt.bindString(9, sugar);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewBloodItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getHistory_id());
        stmt.bindLong(3, entity.getMemberId());
        stmt.bindLong(4, entity.getYear());
        stmt.bindLong(5, entity.getMouth());
        stmt.bindLong(6, entity.getDay());
        stmt.bindLong(7, entity.getHour());
        stmt.bindLong(8, entity.getMinus());
 
        String sugar = entity.getSugar();
        if (sugar != null) {
            stmt.bindString(9, sugar);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewBloodItem readEntity(Cursor cursor, int offset) {
        NewBloodItem entity = new NewBloodItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // history_id
            cursor.getInt(offset + 2), // memberId
            cursor.getInt(offset + 3), // year
            cursor.getInt(offset + 4), // mouth
            cursor.getInt(offset + 5), // day
            cursor.getInt(offset + 6), // hour
            cursor.getInt(offset + 7), // minus
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // sugar
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewBloodItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHistory_id(cursor.getInt(offset + 1));
        entity.setMemberId(cursor.getInt(offset + 2));
        entity.setYear(cursor.getInt(offset + 3));
        entity.setMouth(cursor.getInt(offset + 4));
        entity.setDay(cursor.getInt(offset + 5));
        entity.setHour(cursor.getInt(offset + 6));
        entity.setMinus(cursor.getInt(offset + 7));
        entity.setSugar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewBloodItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewBloodItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewBloodItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
