package com.comvee.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.comvee.hospitalabbott.bean.QualityResultBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUALITY_RESULT_BEAN".
*/
public class QualityResultBeanDao extends AbstractDao<QualityResultBean, Long> {

    public static final String TABLENAME = "QUALITY_RESULT_BEAN";

    /**
     * Properties of entity QualityResultBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property High = new Property(2, float.class, "high", false, "HIGH");
        public final static Property Low = new Property(3, float.class, "low", false, "LOW");
        public final static Property BloodValues = new Property(4, float.class, "bloodValues", false, "BLOOD_VALUES");
        public final static Property QcPagerNo = new Property(5, String.class, "qcPagerNo", false, "QC_PAGER_NO");
        public final static Property QcLiquidNo = new Property(6, String.class, "qcLiquidNo", false, "QC_LIQUID_NO");
        public final static Property QcLiquidLevel = new Property(7, String.class, "qcLiquidLevel", false, "QC_LIQUID_LEVEL");
        public final static Property PassStatus = new Property(8, String.class, "passStatus", false, "PASS_STATUS");
        public final static Property MachineId = new Property(9, String.class, "machineId", false, "MACHINE_ID");
        public final static Property ExplainText = new Property(10, String.class, "explainText", false, "EXPLAIN_TEXT");
    }


    public QualityResultBeanDao(DaoConfig config) {
        super(config);
    }
    
    public QualityResultBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUALITY_RESULT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME\" TEXT," + // 1: time
                "\"HIGH\" REAL NOT NULL ," + // 2: high
                "\"LOW\" REAL NOT NULL ," + // 3: low
                "\"BLOOD_VALUES\" REAL NOT NULL ," + // 4: bloodValues
                "\"QC_PAGER_NO\" TEXT," + // 5: qcPagerNo
                "\"QC_LIQUID_NO\" TEXT," + // 6: qcLiquidNo
                "\"QC_LIQUID_LEVEL\" TEXT," + // 7: qcLiquidLevel
                "\"PASS_STATUS\" TEXT," + // 8: passStatus
                "\"MACHINE_ID\" TEXT," + // 9: machineId
                "\"EXPLAIN_TEXT\" TEXT);"); // 10: explainText
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUALITY_RESULT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QualityResultBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindDouble(3, entity.getHigh());
        stmt.bindDouble(4, entity.getLow());
        stmt.bindDouble(5, entity.getBloodValues());
 
        String qcPagerNo = entity.getQcPagerNo();
        if (qcPagerNo != null) {
            stmt.bindString(6, qcPagerNo);
        }
 
        String qcLiquidNo = entity.getQcLiquidNo();
        if (qcLiquidNo != null) {
            stmt.bindString(7, qcLiquidNo);
        }
 
        String qcLiquidLevel = entity.getQcLiquidLevel();
        if (qcLiquidLevel != null) {
            stmt.bindString(8, qcLiquidLevel);
        }
 
        String passStatus = entity.getPassStatus();
        if (passStatus != null) {
            stmt.bindString(9, passStatus);
        }
 
        String machineId = entity.getMachineId();
        if (machineId != null) {
            stmt.bindString(10, machineId);
        }
 
        String explainText = entity.getExplainText();
        if (explainText != null) {
            stmt.bindString(11, explainText);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QualityResultBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindDouble(3, entity.getHigh());
        stmt.bindDouble(4, entity.getLow());
        stmt.bindDouble(5, entity.getBloodValues());
 
        String qcPagerNo = entity.getQcPagerNo();
        if (qcPagerNo != null) {
            stmt.bindString(6, qcPagerNo);
        }
 
        String qcLiquidNo = entity.getQcLiquidNo();
        if (qcLiquidNo != null) {
            stmt.bindString(7, qcLiquidNo);
        }
 
        String qcLiquidLevel = entity.getQcLiquidLevel();
        if (qcLiquidLevel != null) {
            stmt.bindString(8, qcLiquidLevel);
        }
 
        String passStatus = entity.getPassStatus();
        if (passStatus != null) {
            stmt.bindString(9, passStatus);
        }
 
        String machineId = entity.getMachineId();
        if (machineId != null) {
            stmt.bindString(10, machineId);
        }
 
        String explainText = entity.getExplainText();
        if (explainText != null) {
            stmt.bindString(11, explainText);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QualityResultBean readEntity(Cursor cursor, int offset) {
        QualityResultBean entity = new QualityResultBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.getFloat(offset + 2), // high
            cursor.getFloat(offset + 3), // low
            cursor.getFloat(offset + 4), // bloodValues
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // qcPagerNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // qcLiquidNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qcLiquidLevel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // passStatus
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // machineId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // explainText
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QualityResultBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHigh(cursor.getFloat(offset + 2));
        entity.setLow(cursor.getFloat(offset + 3));
        entity.setBloodValues(cursor.getFloat(offset + 4));
        entity.setQcPagerNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQcLiquidNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQcLiquidLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMachineId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExplainText(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QualityResultBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QualityResultBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QualityResultBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
