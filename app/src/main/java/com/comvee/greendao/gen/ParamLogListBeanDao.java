package com.comvee.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.comvee.hospitalabbott.bean.ParamLogListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARAM_LOG_LIST_BEAN".
*/
public class ParamLogListBeanDao extends AbstractDao<ParamLogListBean, Long> {

    public static final String TABLENAME = "PARAM_LOG_LIST_BEAN";

    /**
     * Properties of entity ParamLogListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdviseContent = new Property(1, String.class, "adviseContent", false, "ADVISE_CONTENT");
        public final static Property BatchId = new Property(2, String.class, "batchId", false, "BATCH_ID");
        public final static Property BedNo = new Property(3, String.class, "bedNo", false, "BED_NO");
        public final static Property DepartmentName = new Property(4, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property HighEmpty = new Property(5, String.class, "highEmpty", false, "HIGH_EMPTY");
        public final static Property HighFull = new Property(6, String.class, "highFull", false, "HIGH_FULL");
        public final static Property InnerCode = new Property(7, String.class, "innerCode", false, "INNER_CODE");
        public final static Property InnerId = new Property(8, String.class, "innerId", false, "INNER_ID");
        public final static Property InsertDt = new Property(9, String.class, "insertDt", false, "INSERT_DT");
        public final static Property IsValid = new Property(10, String.class, "isValid", false, "IS_VALID");
        public final static Property Level = new Property(11, String.class, "level", false, "LEVEL");
        public final static Property LowEmpty = new Property(12, String.class, "lowEmpty", false, "LOW_EMPTY");
        public final static Property LowFull = new Property(13, String.class, "lowFull", false, "LOW_FULL");
        public final static Property MemberId = new Property(14, String.class, "memberId", false, "MEMBER_ID");
        public final static Property MemberName = new Property(15, String.class, "memberName", false, "MEMBER_NAME");
        public final static Property ModifyDt = new Property(16, String.class, "modifyDt", false, "MODIFY_DT");
        public final static Property ParamCode = new Property(17, String.class, "paramCode", false, "PARAM_CODE");
        public final static Property ParamLogId = new Property(18, String.class, "paramLogId", false, "PARAM_LOG_ID");
        public final static Property ParamOption = new Property(19, String.class, "paramOption", false, "PARAM_OPTION");
        public final static Property Processed = new Property(20, String.class, "processed", false, "PROCESSED");
        public final static Property ProcessedDt = new Property(21, String.class, "processedDt", false, "PROCESSED_DT");
        public final static Property ProcessedMsg = new Property(22, String.class, "processedMsg", false, "PROCESSED_MSG");
        public final static Property RecordDt = new Property(23, String.class, "recordDt", false, "RECORD_DT");
        public final static Property RecordOrigin = new Property(24, String.class, "recordOrigin", false, "RECORD_ORIGIN");
        public final static Property RecordTime = new Property(25, String.class, "recordTime", false, "RECORD_TIME");
        public final static Property Remark = new Property(26, String.class, "remark", false, "REMARK");
        public final static Property Status = new Property(27, String.class, "status", false, "STATUS");
        public final static Property Value = new Property(28, String.class, "value", false, "VALUE");
    }

    private Query<ParamLogListBean> memberHistoryBean_ParamLogListQuery;

    public ParamLogListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ParamLogListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARAM_LOG_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ADVISE_CONTENT\" TEXT," + // 1: adviseContent
                "\"BATCH_ID\" TEXT," + // 2: batchId
                "\"BED_NO\" TEXT," + // 3: bedNo
                "\"DEPARTMENT_NAME\" TEXT," + // 4: departmentName
                "\"HIGH_EMPTY\" TEXT," + // 5: highEmpty
                "\"HIGH_FULL\" TEXT," + // 6: highFull
                "\"INNER_CODE\" TEXT," + // 7: innerCode
                "\"INNER_ID\" TEXT," + // 8: innerId
                "\"INSERT_DT\" TEXT," + // 9: insertDt
                "\"IS_VALID\" TEXT," + // 10: isValid
                "\"LEVEL\" TEXT," + // 11: level
                "\"LOW_EMPTY\" TEXT," + // 12: lowEmpty
                "\"LOW_FULL\" TEXT," + // 13: lowFull
                "\"MEMBER_ID\" TEXT," + // 14: memberId
                "\"MEMBER_NAME\" TEXT," + // 15: memberName
                "\"MODIFY_DT\" TEXT," + // 16: modifyDt
                "\"PARAM_CODE\" TEXT," + // 17: paramCode
                "\"PARAM_LOG_ID\" TEXT," + // 18: paramLogId
                "\"PARAM_OPTION\" TEXT," + // 19: paramOption
                "\"PROCESSED\" TEXT," + // 20: processed
                "\"PROCESSED_DT\" TEXT," + // 21: processedDt
                "\"PROCESSED_MSG\" TEXT," + // 22: processedMsg
                "\"RECORD_DT\" TEXT NOT NULL ," + // 23: recordDt
                "\"RECORD_ORIGIN\" TEXT," + // 24: recordOrigin
                "\"RECORD_TIME\" TEXT," + // 25: recordTime
                "\"REMARK\" TEXT," + // 26: remark
                "\"STATUS\" TEXT," + // 27: status
                "\"VALUE\" TEXT);"); // 28: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARAM_LOG_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ParamLogListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String adviseContent = entity.getAdviseContent();
        if (adviseContent != null) {
            stmt.bindString(2, adviseContent);
        }
 
        String batchId = entity.getBatchId();
        if (batchId != null) {
            stmt.bindString(3, batchId);
        }
 
        String bedNo = entity.getBedNo();
        if (bedNo != null) {
            stmt.bindString(4, bedNo);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(5, departmentName);
        }
 
        String highEmpty = entity.getHighEmpty();
        if (highEmpty != null) {
            stmt.bindString(6, highEmpty);
        }
 
        String highFull = entity.getHighFull();
        if (highFull != null) {
            stmt.bindString(7, highFull);
        }
 
        String innerCode = entity.getInnerCode();
        if (innerCode != null) {
            stmt.bindString(8, innerCode);
        }
 
        String innerId = entity.getInnerId();
        if (innerId != null) {
            stmt.bindString(9, innerId);
        }
 
        String insertDt = entity.getInsertDt();
        if (insertDt != null) {
            stmt.bindString(10, insertDt);
        }
 
        String isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindString(11, isValid);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(12, level);
        }
 
        String lowEmpty = entity.getLowEmpty();
        if (lowEmpty != null) {
            stmt.bindString(13, lowEmpty);
        }
 
        String lowFull = entity.getLowFull();
        if (lowFull != null) {
            stmt.bindString(14, lowFull);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(15, memberId);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(16, memberName);
        }
 
        String modifyDt = entity.getModifyDt();
        if (modifyDt != null) {
            stmt.bindString(17, modifyDt);
        }
 
        String paramCode = entity.getParamCode();
        if (paramCode != null) {
            stmt.bindString(18, paramCode);
        }
 
        String paramLogId = entity.getParamLogId();
        if (paramLogId != null) {
            stmt.bindString(19, paramLogId);
        }
 
        String paramOption = entity.getParamOption();
        if (paramOption != null) {
            stmt.bindString(20, paramOption);
        }
 
        String processed = entity.getProcessed();
        if (processed != null) {
            stmt.bindString(21, processed);
        }
 
        String processedDt = entity.getProcessedDt();
        if (processedDt != null) {
            stmt.bindString(22, processedDt);
        }
 
        String processedMsg = entity.getProcessedMsg();
        if (processedMsg != null) {
            stmt.bindString(23, processedMsg);
        }
        stmt.bindString(24, entity.getRecordDt());
 
        String recordOrigin = entity.getRecordOrigin();
        if (recordOrigin != null) {
            stmt.bindString(25, recordOrigin);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(26, recordTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(27, remark);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(28, status);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(29, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ParamLogListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String adviseContent = entity.getAdviseContent();
        if (adviseContent != null) {
            stmt.bindString(2, adviseContent);
        }
 
        String batchId = entity.getBatchId();
        if (batchId != null) {
            stmt.bindString(3, batchId);
        }
 
        String bedNo = entity.getBedNo();
        if (bedNo != null) {
            stmt.bindString(4, bedNo);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(5, departmentName);
        }
 
        String highEmpty = entity.getHighEmpty();
        if (highEmpty != null) {
            stmt.bindString(6, highEmpty);
        }
 
        String highFull = entity.getHighFull();
        if (highFull != null) {
            stmt.bindString(7, highFull);
        }
 
        String innerCode = entity.getInnerCode();
        if (innerCode != null) {
            stmt.bindString(8, innerCode);
        }
 
        String innerId = entity.getInnerId();
        if (innerId != null) {
            stmt.bindString(9, innerId);
        }
 
        String insertDt = entity.getInsertDt();
        if (insertDt != null) {
            stmt.bindString(10, insertDt);
        }
 
        String isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindString(11, isValid);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(12, level);
        }
 
        String lowEmpty = entity.getLowEmpty();
        if (lowEmpty != null) {
            stmt.bindString(13, lowEmpty);
        }
 
        String lowFull = entity.getLowFull();
        if (lowFull != null) {
            stmt.bindString(14, lowFull);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(15, memberId);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(16, memberName);
        }
 
        String modifyDt = entity.getModifyDt();
        if (modifyDt != null) {
            stmt.bindString(17, modifyDt);
        }
 
        String paramCode = entity.getParamCode();
        if (paramCode != null) {
            stmt.bindString(18, paramCode);
        }
 
        String paramLogId = entity.getParamLogId();
        if (paramLogId != null) {
            stmt.bindString(19, paramLogId);
        }
 
        String paramOption = entity.getParamOption();
        if (paramOption != null) {
            stmt.bindString(20, paramOption);
        }
 
        String processed = entity.getProcessed();
        if (processed != null) {
            stmt.bindString(21, processed);
        }
 
        String processedDt = entity.getProcessedDt();
        if (processedDt != null) {
            stmt.bindString(22, processedDt);
        }
 
        String processedMsg = entity.getProcessedMsg();
        if (processedMsg != null) {
            stmt.bindString(23, processedMsg);
        }
        stmt.bindString(24, entity.getRecordDt());
 
        String recordOrigin = entity.getRecordOrigin();
        if (recordOrigin != null) {
            stmt.bindString(25, recordOrigin);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(26, recordTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(27, remark);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(28, status);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(29, value);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ParamLogListBean readEntity(Cursor cursor, int offset) {
        ParamLogListBean entity = new ParamLogListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // adviseContent
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // batchId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bedNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // departmentName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // highEmpty
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // highFull
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // innerCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // innerId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // insertDt
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isValid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // level
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lowEmpty
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // lowFull
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // memberId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // memberName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // modifyDt
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // paramCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // paramLogId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // paramOption
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // processed
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // processedDt
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // processedMsg
            cursor.getString(offset + 23), // recordDt
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // recordOrigin
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // recordTime
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // remark
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // status
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ParamLogListBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdviseContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBatchId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBedNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartmentName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHighEmpty(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHighFull(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInnerCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInnerId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInsertDt(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsValid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLevel(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLowEmpty(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLowFull(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMemberId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMemberName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setModifyDt(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setParamCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setParamLogId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setParamOption(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setProcessed(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setProcessedDt(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setProcessedMsg(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRecordDt(cursor.getString(offset + 23));
        entity.setRecordOrigin(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setRecordTime(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setRemark(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setStatus(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setValue(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ParamLogListBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ParamLogListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ParamLogListBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "paramLogList" to-many relationship of MemberHistoryBean. */
    public List<ParamLogListBean> _queryMemberHistoryBean_ParamLogList(String recordDt, String memberId) {
        synchronized (this) {
            if (memberHistoryBean_ParamLogListQuery == null) {
                QueryBuilder<ParamLogListBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RecordDt.eq(null));
                queryBuilder.where(Properties.MemberId.eq(null));
                memberHistoryBean_ParamLogListQuery = queryBuilder.build();
            }
        }
        Query<ParamLogListBean> query = memberHistoryBean_ParamLogListQuery.forCurrentThread();
        query.setParameter(0, recordDt);
        query.setParameter(1, memberId);
        return query.list();
    }

}
