package com.comvee.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.comvee.hospitalabbott.bean.TestPaperModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST_PAPER_MODEL".
*/
public class TestPaperModelDao extends AbstractDao<TestPaperModel, Long> {

    public static final String TABLENAME = "TEST_PAPER_MODEL";

    /**
     * Properties of entity TestPaperModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, String.class, "sid", false, "SID");
        public final static Property InsertDt = new Property(2, String.class, "insertDt", false, "INSERT_DT");
        public final static Property Level1H = new Property(3, String.class, "level1H", false, "LEVEL1_H");
        public final static Property Level1L = new Property(4, String.class, "level1L", false, "LEVEL1_L");
        public final static Property Level2H = new Property(5, String.class, "level2H", false, "LEVEL2_H");
        public final static Property Level2L = new Property(6, String.class, "level2L", false, "LEVEL2_L");
        public final static Property ModifyDt = new Property(7, String.class, "modifyDt", false, "MODIFY_DT");
        public final static Property TestNo = new Property(8, String.class, "testNo", false, "TEST_NO");
        public final static Property UserId = new Property(9, String.class, "userId", false, "USER_ID");
        public final static Property WaterNo = new Property(10, String.class, "waterNo", false, "WATER_NO");
    }


    public TestPaperModelDao(DaoConfig config) {
        super(config);
    }
    
    public TestPaperModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST_PAPER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SID\" TEXT," + // 1: sid
                "\"INSERT_DT\" TEXT," + // 2: insertDt
                "\"LEVEL1_H\" TEXT," + // 3: level1H
                "\"LEVEL1_L\" TEXT," + // 4: level1L
                "\"LEVEL2_H\" TEXT," + // 5: level2H
                "\"LEVEL2_L\" TEXT," + // 6: level2L
                "\"MODIFY_DT\" TEXT," + // 7: modifyDt
                "\"TEST_NO\" TEXT," + // 8: testNo
                "\"USER_ID\" TEXT," + // 9: userId
                "\"WATER_NO\" TEXT);"); // 10: waterNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_PAPER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TestPaperModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
 
        String insertDt = entity.getInsertDt();
        if (insertDt != null) {
            stmt.bindString(3, insertDt);
        }
 
        String level1H = entity.getLevel1H();
        if (level1H != null) {
            stmt.bindString(4, level1H);
        }
 
        String level1L = entity.getLevel1L();
        if (level1L != null) {
            stmt.bindString(5, level1L);
        }
 
        String level2H = entity.getLevel2H();
        if (level2H != null) {
            stmt.bindString(6, level2H);
        }
 
        String level2L = entity.getLevel2L();
        if (level2L != null) {
            stmt.bindString(7, level2L);
        }
 
        String modifyDt = entity.getModifyDt();
        if (modifyDt != null) {
            stmt.bindString(8, modifyDt);
        }
 
        String testNo = entity.getTestNo();
        if (testNo != null) {
            stmt.bindString(9, testNo);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String waterNo = entity.getWaterNo();
        if (waterNo != null) {
            stmt.bindString(11, waterNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TestPaperModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
 
        String insertDt = entity.getInsertDt();
        if (insertDt != null) {
            stmt.bindString(3, insertDt);
        }
 
        String level1H = entity.getLevel1H();
        if (level1H != null) {
            stmt.bindString(4, level1H);
        }
 
        String level1L = entity.getLevel1L();
        if (level1L != null) {
            stmt.bindString(5, level1L);
        }
 
        String level2H = entity.getLevel2H();
        if (level2H != null) {
            stmt.bindString(6, level2H);
        }
 
        String level2L = entity.getLevel2L();
        if (level2L != null) {
            stmt.bindString(7, level2L);
        }
 
        String modifyDt = entity.getModifyDt();
        if (modifyDt != null) {
            stmt.bindString(8, modifyDt);
        }
 
        String testNo = entity.getTestNo();
        if (testNo != null) {
            stmt.bindString(9, testNo);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String waterNo = entity.getWaterNo();
        if (waterNo != null) {
            stmt.bindString(11, waterNo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TestPaperModel readEntity(Cursor cursor, int offset) {
        TestPaperModel entity = new TestPaperModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // insertDt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // level1H
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // level1L
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // level2H
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // level2L
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // modifyDt
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // testNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // waterNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TestPaperModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInsertDt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLevel1H(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLevel1L(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLevel2H(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLevel2L(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setModifyDt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTestNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWaterNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TestPaperModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TestPaperModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TestPaperModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
