package com.comvee.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.comvee.hospitalabbott.bean.TestInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST_INFO".
*/
public class TestInfoDao extends AbstractDao<TestInfo, Long> {

    public static final String TABLENAME = "TEST_INFO";

    /**
     * Properties of entity TestInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Value = new Property(2, String.class, "value", false, "VALUE");
        public final static Property ParamCode = new Property(3, String.class, "paramCode", false, "PARAM_CODE");
        public final static Property RecordTime = new Property(4, String.class, "recordTime", false, "RECORD_TIME");
        public final static Property MemberId = new Property(5, String.class, "memberId", false, "MEMBER_ID");
        public final static Property StateInte = new Property(6, int.class, "stateInte", false, "STATE_INTE");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property TimeLine = new Property(8, String.class, "timeLine", false, "TIME_LINE");
        public final static Property IsManual = new Property(9, boolean.class, "isManual", false, "IS_MANUAL");
    }


    public TestInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TestInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"VALUE\" TEXT," + // 2: value
                "\"PARAM_CODE\" TEXT," + // 3: paramCode
                "\"RECORD_TIME\" TEXT," + // 4: recordTime
                "\"MEMBER_ID\" TEXT," + // 5: memberId
                "\"STATE_INTE\" INTEGER NOT NULL ," + // 6: stateInte
                "\"REMARK\" TEXT," + // 7: remark
                "\"TIME_LINE\" TEXT," + // 8: timeLine
                "\"IS_MANUAL\" INTEGER NOT NULL );"); // 9: isManual
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TestInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        String paramCode = entity.getParamCode();
        if (paramCode != null) {
            stmt.bindString(4, paramCode);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(5, recordTime);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(6, memberId);
        }
        stmt.bindLong(7, entity.getStateInte());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String timeLine = entity.getTimeLine();
        if (timeLine != null) {
            stmt.bindString(9, timeLine);
        }
        stmt.bindLong(10, entity.getIsManual() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TestInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        String paramCode = entity.getParamCode();
        if (paramCode != null) {
            stmt.bindString(4, paramCode);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(5, recordTime);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(6, memberId);
        }
        stmt.bindLong(7, entity.getStateInte());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String timeLine = entity.getTimeLine();
        if (timeLine != null) {
            stmt.bindString(9, timeLine);
        }
        stmt.bindLong(10, entity.getIsManual() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TestInfo readEntity(Cursor cursor, int offset) {
        TestInfo entity = new TestInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // paramCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // recordTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // memberId
            cursor.getInt(offset + 6), // stateInte
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // timeLine
            cursor.getShort(offset + 9) != 0 // isManual
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TestInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParamCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecordTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMemberId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStateInte(cursor.getInt(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimeLine(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsManual(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TestInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TestInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TestInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
